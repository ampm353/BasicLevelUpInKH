
@@ 배열
@ 기본형 변수, 참조형 변수
- 기존의 변수들은 "자료형 변수명;" 양식으로 선언.
- 배열 또한 int[] arr; / int arr[]; 형태로 선언.
- 기본형 변수는 크기가 정해져 있지만 참조형 변수는 그렇지 않다.
- 배열이 바로 참조형 변수
- 메모리 영역에는 단순하게 스택영역과 힙영역이 존재.
- 스택영역은 기본형 변수 관점에서 직접적으로 값을 저장하는 공간이라 할 수 있고, 참조형 변수 관점에서는 주소를 저장하는 공간이라고 할 수 있다.
- 힙 영역은 참조형 변수의 실제 데이터 값이 저장되어 있는 공간

@ 배열
- int[] arr = new int[5]; 와 같이 선언하면 정수형 데이터 5개를 담을 수 있는 공간이 확보된다.
- 배열 타입을 굳이 사용하는 이유는 같은 타입의 데이터 여러개를 한번에 선언이 가능하고, 연속적인 사용이 가능하기 때문.
- 제어문에서 사용이 용이해진다.

@ 얕은 복사, 깊은 복사
- 얕은 복사
	- 주소값만 복사하는 개념.
	- 객체의 주소값만 가져와 참조형 변수에 저장하고 하나의 객체를 두 변수가 참조하고 있는 것.
	- 코드
		int[] num1 = {10, 20, 30, 40, 50};
		int[] num2;
		num2 = num1;
		num1[0] = 100;
		System.out.println(num1[0]); // 100
		System.out.println(num2[0]); // 10이 아닌 100이 출력
- 깊은 복사
	- 실제 값을 복사하는 개념.
	- 다른 객체를 생성하여 새로운 객체에 데이터 내용을 복사하는 것.
	- 코드
		int[] num1 = {10, 20, 30, 40, 50};
		int[] num2;
		num2 = num1.clone();
		num1[0] = 100;
		System.out.println(num1[0]); // 100
		System.out.println(num2[0]); // 10
@@ 정렬
@ 오름차순, 내림차순

@@ 정렬 알고리즘
- 정렬 알고리즘 시간 복잡도 비교
Name		Best	Avg	Worst	Run-time(정수60,000)개 단위:sec (C언어 기준)
삽입정렬		n	n^2	n^2	7.438
선택정렬		n^2	n^2	n^2	10.842
버블정렬		n^2	n^2	n^2	22.894
셸 정렬		n	n^1.5	n^2	0.056
퀵 정렬		nlog2n	nlog2n	n^2	0.014
힙 정렬		nlog2n	nlog2n	nlog2n	0.034
병합정렬		nlog2n	nlog2n	nlog2n	0.026
- 단순(구현 간단) 하지만 비효율적인 방법
	: 삽입 정렬, 선택 정렬, 버블 정렬
- 복잡하지만 효율적인 방법
	: 퀵 정렬, 힙 정렬, 합병 정렬, 기수 정렬

@ 삽입정렬
- 오름차순을 기준으로 정렬한다.
- 손안의 카드를 정렬하는 방법과 유사하다.
	- 새로운 카드를 기존의 정렬된 카드 사이의 올바른 자리를 찾아 삽입한다.
	- 새로 삽입될 카드의 수만큼 반복하게 되면 전체 카드가 정렬된다.
- 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘
- 매 순서마다 해당 원소를 삽입할 수 있는 위치를 찾아 해당 위치에 넣는다.
- 과정 설명
	1. 처음 key 값은 두번째 자료부터 시작한다.
	2. key 앞쪽의 자료들과 비교하여 삽입할 위치를 지정한 후 자료를 뒤로 옮기고 지정한 자리에 자료를 삽입하여 정렬
	3. 즉, 두번째 자료는 첫번째 자료, 세번째 자료는 두번째,첫번째 자료, 네번째 자료는 세번째,두번째,첫번째 자료와 비교한 후 자료가 삽입될 위치를 찾는다. 자료가 삽입될 위치를 찾았다면 그 위치에 자료를 삽입하기 위해서 자료를 한칸 씩 뒤로 이동시킨다.
- 장점 :
	- 안정한 정렬 방법
	- 레코드의 수가 적을 경우 알고리즘 자체가 매우 간단하므로 다른 복잡한 정렬 방법보다 유리할 수 있다.
	- 대부분의 레코드가 이미 정렬되어 있는 경우에 매우 효율적일 수 있다.
- 단점 :
	- 비교적 많은 레코드들의 이동을 포함한다.
	- 레코드 수가 많고 레코드 크기가 클 경우에 적합하지 않다.

@ 선택정렬
- 제자리 정렬(in-place sorting) 알고리즘의 하나
	: 입력 배열(정렬되지 않은 값들) 이외에 다른 추가 메모리를 요구하지 않는 정렬 방법
- 오름차순을 기준으로 정렬한다.
- 해당 순서에 원소를 넣을 위치는 이미 정해져 있고, 어떤 원소를 넣을지 선택하는 알고리즘
	: 첫번째 순서에는 첫번째 위치에 가장 최솟값을 넣는다.
	: 두번째 순서에는 두번째 위치에 남은 값 중에서 최솟값을 넣는다.
	: ...
- 과정 설명 
	1. 주어진 배열 중에서 최솟값을 찾는다.
	2. 그 값을 맨 앞에 위치한 값과 교체한다(패스(PASS))
	3. 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.
	4. 하나의 원소만 남을 때까지 위의 1~3 과정을 반복한다.
- 장점 :
	- 자료 이동 횟수가 미리 결정된다.
- 단점 :
	- 안정성을 만족하지 않는다.
	- 즉, 값이 같은 레코드가 있는 경우에 상대적인 위치가 변경될 수 있다.
 
@ 버블정렬
- 오름차순을 기준으로 정렬한다.
- 서로 인접한 두 원소를 검사하여 정렬하는 알고리즘
- 인접한 3개의 레코드를 비교하여 크기가 순서대로 되어 있지 않으면 서로 교환한다.
- 선택정렬과 기본 개념이 유사하다.
- 과정 설명
	1. 버블 정렬은 첫번째 자료와 두번째 자료를, 두번째 자료와 세번째 자료를, 세번째와 네번째, ... 이런 식으로 (마지막-1)번째 자료와 마지막 자료를 비교하여 교환하면서 자료를 정렬한다.
	2. 1회전을 수행하고 나면 가장 큰 자료가 맨 뒤로 이동하므로 2회전에서는 맨 끝에 있는 자료는 정렬에서 제외되고, 2회전을 수행하고 나면 끝에서 두번째 자료까지는 정렬에서 제외된다. 
	3. 이렇게 정렬을 1회전 수행할 때마다 정렬에서 제외되는 데이터가 하나씩 늘어난다.
- 장점 :
	- 구현이 매우 간단하다.
- 단점 : 
	- 순서에 맞지 않은 요소를 인접한 요소와 교환한다.
	- 하나의 요소가 가장 왼쪽에서 가장 오른쪽으로 이동하기 위해서는 배열에서 모든 다른 요소들과 교환되어야 한다.
	- 특히 특정 요소가 최종 정렬 위치에 이미 있는 경우라도 교환되는 일이 일어난다.
- 일반적으로 자료의 교환작업(SWAP)이 자료의 이동작업(MOVE)보다 더 복잡하기 때문에 버블 정렬은 단순성에도 불구하고 거의 쓰이지 않는다.
- 
@ 셸 정렬
- 오름차순을 기준으로 정렬한다.
- Donald L. Shell 이라는 사람이 제안한 방법으로, 삽입정렬을 보완한 알고리즘이다.
- 삽입 정렬이 어느 정도 정렬된 배열에 대해서는 대단히 빠른 것에 착안
	- 삽입 정렬의 최대 문제점 : 요소들이 삽입될 때, 이웃한 위치로만 이동
	- 즉, 만약 삽입되어야 할 위치가 현재 위치에서 상당히 멀리 떨어진 곳이라면 많은 이동을 해야만 제자리로 갈 수 있다.
	- 삽입 정렬과 다르게 셸 정렬은 전체의 리스트를 한번에 정렬하지 않는다.
- 과정 설명
	1. 먼저 정렬해야 할 리스트를 일정한 기준에 따라 분류
	2. 연속적이지 않은 여러 개의 부분 리스트를 생성
	3. 각 부분 리스트를 삽입 정렬을 이용하여 정렬
	4. 모든 부분 리스트가 정렬되면 다시 전체 리스트를 더 적은 개수의 부분 리스트로 만든 후에 알고리즘을 반복
	5. 위의 과정을 부분 리스트의 개수가 1이 될 때 까지 반복
- 장점 :
	- 연속적이지 않은 부분 리스트에서 자료의 교환이 일어나면 더 큰 거리를 이동한다. 따라서 교환되는 요소들의 삽입 정렬보다는 최종 위치에 있을 가능성이 높아진다.
	- 부분 리스트는 어느 정도 정렬이 된 상태이기 때문에 부분 리스트의 개수가 1이 되게 되면 셸 정렬은 기본적으로 삽입 정렬을 수행하는 것이지만 삽입 정렬보다 더욱 빠르게 수행된다.
	- 알고리즘이 간단하여 프로그램으로 쉽게 구현할 수 있다.


@ 퀵 정렬

@ 힙 정렬

@ 병합정렬